{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\solidity\\\\hardhat\\u5165\\u95E8\\\\hardhat-react-1\\\\my-app\\\\src\\\\components\\\\Dapp.js\";\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport simpleTokenArtifact from '../contracts/SimpleToken.json';\nimport contractAddress from '../contracts/contract-address.json';\n//import deployerAccount from '../contracts/deployer.json'\n\nimport { NoWalletDetected } from './NoWalletDetected';\nimport { ConnectWallet } from './ConnectWallet';\nimport { Loading } from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HARDHAT_NETWORK_ID = '11155111';\nsimpleTokenArtifact;\nlet simpleTokenContractAddress = contractAddress.contractAddress;\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      tokenData: undefined,\n      selectedAddress: undefined,\n      balance: undefined,\n      txBeingSent: undefined,\n      deployBegin: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      decimals: undefined\n    };\n    this.state = this.initialState;\n  }\n  async _connectWallet() {\n    const [selectedAddress] = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    if (!this._checkNetwork()) {\n      return;\n    }\n    this._initialize(selectedAddress);\n    window.ethereum.on('accountsChanged', ([newAddress]) => {\n      this._stopPollingData();\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      this._initialize(newAddress);\n    });\n    window.ethereum.on('chainChanged', ([_chainId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n    this.setState({\n      networkError: 'Please connect Metamask to goerli'\n    });\n    return false;\n  }\n  _initialize(userAddress) {\n    this.setState({\n      selectedAddress: userAddress\n    });\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n  }\n  async _intializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    this._simpleToken = new ethers.Contract(simpleTokenContractAddress, simpleTokenArtifact.abi, this._provider.getSigner(0));\n    this.setState({\n      decimals: await this._simpleToken.decimals()\n    });\n  }\n  async _getTokenData() {\n    const name = await this._simpleToken.name();\n    const symbol = await this._simpleToken.symbol();\n    this.setState({\n      tokenData: {\n        name,\n        symbol\n      }\n    });\n  }\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n    this._updateBalance();\n  }\n  async _updateBalance() {\n    const balance = await this._simpleToken.balanceOf(this.state.selectedAddress);\n    this.setState({\n      balance\n    });\n  }\n  _resetState() {\n    this.setState(this.initialState);\n  }\n  render() {\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/_jsxDEV(NoWalletDetected, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 18\n      }, this);\n    }\n    if (!this.state.selectedAddress) {\n      return /*#__PURE__*/_jsxDEV(ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.networkError,\n        dismiss: () => this._dismissNetworkError()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this);\n    }\n    if (!this.state.tokenData || !this.state.balance) {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 18\n      }, this);\n    }\n  }\n}","map":{"version":3,"names":["React","ethers","simpleTokenArtifact","contractAddress","NoWalletDetected","ConnectWallet","Loading","jsxDEV","_jsxDEV","HARDHAT_NETWORK_ID","simpleTokenContractAddress","Dapp","Component","constructor","props","initialState","tokenData","undefined","selectedAddress","balance","txBeingSent","deployBegin","transactionError","networkError","decimals","state","_connectWallet","window","ethereum","request","method","_checkNetwork","_initialize","on","newAddress","_stopPollingData","_resetState","_chainId","networkVersion","setState","userAddress","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_simpleToken","Contract","abi","getSigner","name","symbol","_pollDataInterval","setInterval","_updateBalance","balanceOf","render","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","dismiss","_dismissNetworkError"],"sources":["D:/CODE/solidity/hardhat入门/hardhat-react-1/my-app/src/components/Dapp.js"],"sourcesContent":["import React from 'react'\r\n\r\nimport { ethers } from 'ethers'\r\n\r\nimport simpleTokenArtifact from '../contracts/SimpleToken.json'\r\nimport contractAddress from '../contracts/contract-address.json'\r\n//import deployerAccount from '../contracts/deployer.json'\r\n\r\n\r\nimport { NoWalletDetected } from './NoWalletDetected'\r\nimport { ConnectWallet } from './ConnectWallet'\r\nimport { Loading } from './Loading'\r\n\r\nconst HARDHAT_NETWORK_ID = '11155111'\r\n\r\nsimpleTokenArtifact\r\n\r\nlet simpleTokenContractAddress = contractAddress.contractAddress\r\n\r\nexport class Dapp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n          this.initialState = {\r\n          \r\n          tokenData: undefined,\r\n          selectedAddress: undefined,\r\n          balance: undefined,\r\n          txBeingSent: undefined,\r\n          deployBegin: undefined,\r\n          transactionError: undefined,\r\n          networkError: undefined,\r\n          decimals: undefined,\r\n\r\n        }\r\n    \r\n        this.state = this.initialState\r\n    }\r\n\r\n\r\n    async _connectWallet() {\r\n\r\n        const [selectedAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n\r\n        if (!this._checkNetwork()) {\r\n          return\r\n        }\r\n    \r\n        this._initialize(selectedAddress)\r\n    \r\n        window.ethereum.on('accountsChanged', ([newAddress]) => {\r\n          this._stopPollingData()\r\n          if (newAddress === undefined) {\r\n            return this._resetState()\r\n          }\r\n    \r\n          this._initialize(newAddress)\r\n        })\r\n    \r\n        window.ethereum.on('chainChanged', ([_chainId]) => {\r\n          this._stopPollingData()\r\n          this._resetState()\r\n        })\r\n    }\r\n\r\n    _checkNetwork() {\r\n      if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\r\n        return true\r\n      }\r\n  \r\n      this.setState({\r\n        networkError: 'Please connect Metamask to goerli',\r\n      })\r\n  \r\n      return false\r\n    }\r\n\r\n    _initialize(userAddress) {\r\n\r\n      this.setState({\r\n        selectedAddress: userAddress,\r\n      })\r\n\r\n      this._intializeEthers()\r\n      this._getTokenData()\r\n      this._startPollingData()\r\n    }\r\n    \r\n    async _intializeEthers() {\r\n      \r\n      this._provider = new ethers.providers.Web3Provider(window.ethereum)\r\n  \r\n      this._simpleToken = new ethers.Contract(\r\n        simpleTokenContractAddress,\r\n        simpleTokenArtifact.abi,\r\n        this._provider.getSigner(0)\r\n      )\r\n      this.setState({decimals: await this._simpleToken.decimals()})\r\n    }\r\n\r\n    async _getTokenData() {\r\n      const name = await this._simpleToken.name()\r\n      const symbol = await this._simpleToken.symbol()\r\n  \r\n      this.setState({ tokenData: { name, symbol } })\r\n    }\r\n\r\n    _startPollingData() {\r\n      this._pollDataInterval = setInterval(() => this._updateBalance(), 1000)\r\n  \r\n      this._updateBalance()\r\n    }\r\n\r\n    async _updateBalance() {\r\n      const balance = await this._simpleToken.balanceOf(\r\n        this.state.selectedAddress\r\n      )\r\n      this.setState({ balance })\r\n    }\r\n\r\n    _resetState() {\r\n      this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n\r\n        if (window.ethereum === undefined) {\r\n          return <NoWalletDetected />\r\n        }\r\n    \r\n        if (!this.state.selectedAddress) {\r\n          return (\r\n            <ConnectWallet\r\n              connectWallet={() => this._connectWallet()}\r\n              networkError={this.state.networkError}\r\n              dismiss={() => this._dismissNetworkError()}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (!this.state.tokenData || !this.state.balance) {\r\n          return <Loading />\r\n        }\r\n    \r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}